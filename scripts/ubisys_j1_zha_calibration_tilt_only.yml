alias: Ubisys J1 calibration - tilt only
description: >
  Execute calibration procedure for Ubisys J1 connected to lift & tilt window shades.
  ⚠️ The procedure currently depends on ZHA Toolkit. https://github.com/mdeweerd/zha-toolkit. Please install it first. ⚠️
  See: https://www.ubisys.de/wp-content/uploads/ubisys-j1-technical-reference.pdf.
icon: mdi:window-shutter-cog
mode: parallel
fields:
  device:
    required: true
    name: Device
    description: The Ubisys J1 device to calibrate.
    selector:
      device:
        integration: zha
        manufacturer: ubisys
  tilt_time:
    required: true
    name: Tilt time
    default: 50
    description: Measured in number of full AC waves. In 50 Hz systems, 1 wave = 20ms.
    selector:
      number:
        min: 10
        max: 300
        unit_of_measurement: AC waves
  window_covering_type:
    required: true
    name: Window covering type
    default: "8"
    selector:
      select:
        options:
          - label: Rollershade
            value: "0"
          - label: Rollershade (2 motor)
            value: "1"
          - label: Rollershade (exterior)
            value: "2"
          - label: Rollershade (exterior, 2 motor)
            value: "3"
          - label: Drapery
            value: "4"
          - label: Awning
            value: "5"
          - label: Shutter
            value: "6"
          - label: Tilt Blind (tilt only)
            value: "7"
          - label: Tilt Blind (lift and tilt)
            value: "8"
          - label: Projector Screen
            value: "9"
  motor_reversed:
    required: true
    name: Motor direction reversed
    default: false
    selector:
      boolean:
sequence:
  - alias: Get IEEE address of the device
    variables:
      ieee: "{{ device_attr(device, 'identifiers') | list | first | last }}"

    # Step 1:
    # Write attribute 0x10F2:0x0000 (“WindowCoveringType”) accordingly.

  - alias: 'Step 1: set window covering type'
    action: zha.set_zigbee_cluster_attribute
    data:
      cluster_type: in
      ieee: "{{ ieee }}"
      endpoint_id: 1
      cluster_id: 0x0102
      manufacturer: 0x10F2
      attribute: 0x0000
      value: "{{ window_covering_type | int }}"

    # Step 2
    # Prepare calibration by setting these values:
    # Write attribute 0x10F2:0x0012 (“InstalledOpenLimitTilt”) as 0x0000 = 0°.
    # Write attribute 0x10F2:0x0013 (“InstalledClosedLimitTilt”) as 0x0384 = 90.0°.
    # Write attribute 0x10F2:0x1001 (“LiftToTiltTransitionSteps”) as 0xFFFF = invalid.
    # Write attribute 0x10F2:0x1003 (“LiftToTiltTransitionSteps2”) as 0xFFFF = invalid.

  - alias: "Step 2: prepare calibration settings"
    repeat:
      count: 1
      sequence:
        - action: zha.set_zigbee_cluster_attribute
          data:
            cluster_type: in
            ieee: "{{ ieee }}"
            endpoint_id: 1
            cluster_id: 0x0102
            manufacturer: 0x10F2
            attribute: 0x0012
            value: 0x0000 # = 0°
        - action: zha.set_zigbee_cluster_attribute
          data:
            cluster_type: in
            ieee: "{{ ieee }}"
            endpoint_id: 1
            cluster_id: 0x0102
            manufacturer: 0x10F2
            attribute: 0x0013
            value: 0x0384 # = 90.0°
        - action: zha_toolkit.attr_write
          data:
            ieee: "{{ ieee }}"
            endpoint: 1
            cluster: 0x0102
            manf: 0x10F2
            attribute: 0x1001
            attr_val: 0xFFFF # = invalid
        - action: zha_toolkit.attr_write
          data:
            ieee: "{{ ieee }}"
            endpoint: 1
            cluster: 0x0102
            manf: 0x10F2
            attribute: 0x1003
            attr_val: 0xFFFF # = invalid
        - delay: 2
          alias: Wait for initial configuration to propagate

    # Step 3
    # Enter calibration mode:
    # Write attribute 0x0017 (“Mode”) according to ZCL spec

  - alias: "Step 3: enter calibration mode"
    action: zha.set_zigbee_cluster_attribute
    data:
      cluster_type: in
      ieee: "{{ ieee }}"
      endpoint_id: 1
      cluster_id: 0x0102
      attribute: 0x0017
      value: "{{ 3 if motor_reversed else 2 }}"

    # Step 8
    # In case of a tilt blind set attribute 0x10F2:0x1001 and 0x10F2:0x1003 to the time it takes for a lift-to-tilt transition (down) or a tilt-to-lift transition (up), respectively.
    # Otherwise proceed with the next step.

  - alias: "Step 8: set tilt times"
    repeat:
      count: "{{ 1 if window_covering_type == '8' else 0 }}"
      sequence:
        - action: zha_toolkit.attr_write
          data:
            ieee: "{{ ieee }}"
            endpoint: 1
            cluster: 0x0102
            manf: 0x10F2
            attribute: 0x1001
            attr_val: "{{ tilt_time }}" # the time it takes for a lift-to-tilt transition (down) - measured in number of full AC waves - 20ms = 1 step
        - action: zha_toolkit.attr_write
          data:
            ieee: "{{ ieee }}"
            endpoint: 1
            cluster: 0x0102
            manf: 0x10F2
            attribute: 0x1003
            attr_val: "{{ tilt_time }}" # the time it takes for a tilt-to-lift transition (up) - measured in number of full AC waves - 20ms = 1 step

    # Step 9
    # To leave calibration mode, clear bit #1 in the Mode attribute, e.g. write attribute 0x0017 as 0x00.
  - alias: "Step 9: leave calibration mode"
    repeat:
      count: 1
      sequence:
        - action: zha.set_zigbee_cluster_attribute
          data:
            cluster_type: in
            ieee: "{{ ieee }}"
            endpoint_id: 1
            cluster_id: 0x0102
            attribute: 0x0017
            value: "{{ 1 if motor_reversed else 0 }}"
        - delay: 2
          alias: Wait for calibration mode end to propagate

    # Hints
    # Once you leave calibration mode, move the blind down a little and then move it up.
    # When it reaches the top position the relevant positioning attributes (absolute and percentage) should read as 0 (lift & tilt).

  - alias: "Appendix: reach upper limit to start reporting correct position"
    repeat:
      count: 1
      sequence:
        - action: zha.issue_zigbee_cluster_command
          data:
            cluster_type: in
            ieee: "{{ ieee }}"
            command_type: server
            endpoint_id: 1
            cluster_id: 0x0102
            command: 0x01 # = move down
            params: {}
        - delay: 1
        - action: zha.issue_zigbee_cluster_command
          data:
            cluster_type: in
            ieee: "{{ ieee }}"
            command_type: server
            endpoint_id: 1
            cluster_id: 0x0102
            command: 0x00 # = move up
            params: {}
